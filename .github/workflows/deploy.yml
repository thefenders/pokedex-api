name: Deploy Docker Image to Elastic Beanstalk

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 319844024891.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: pokedex-api
  IMAGE_TAG: latest
  EB_APP_NAME: pokedex-api-docker-env
  EB_ENV_NAME: Pokedex-api-docker-env-env
  S3_BUCKET: pokedex-api-deployments

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker Image
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push Docker Image
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Ensure Dockerrun has content
        run: |
          echo "Contenido de Dockerrun.aws.json:" && cat Dockerrun.aws.json
          if [ ! -s Dockerrun.aws.json ]; then
            echo "❌ ERROR: Dockerrun.aws.json está vacío" && exit 1
          fi

      - name: Package Dockerrun.aws.json
        run: |
          ZIP_NAME=deploy-${{ github.sha }}.zip
          zip -r $ZIP_NAME Dockerrun.aws.json
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload ZIP to S3
        run: |
          aws s3 cp $ZIP_NAME s3://$S3_BUCKET/$ZIP_NAME

      - name: Wait for ZIP to propagate
        run: sleep 15

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy-${{ github.sha }}.zip
          existing_bucket_name: ${{ env.S3_BUCKET }}

      - name: Esperar a que Elastic Beanstalk procese la versión
        run: |
          echo "Esperando que Elastic Beanstalk procese la versión de aplicación..."
          for i in {1..20}; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name $EB_APP_NAME \
              --version-label ${{ github.sha }} \
              --query "ApplicationVersions[0].Status" \
              --output text)
            echo "Intento $i - Estado actual: $STATUS"
            if [ "$STATUS" == "PROCESSED" ]; then
              echo "✅ Aplicación procesada."
              exit 0
            fi
            echo "⏳ Aún no está procesada, esperando 15 segundos..."
            sleep 15
          done
          echo "⛔ La versión nunca cambió a PROCESSED"
          exit 1
